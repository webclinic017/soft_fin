# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rpc.protoc.conditional_trigger_pb2 as conditional__trigger__pb2


class ConditionalTriggerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StockTurnoverRate = channel.unary_unary(
        '/ConditionalTrigger/StockTurnoverRate',
        request_serializer=conditional__trigger__pb2.StockTurnoverRateInput.SerializeToString,
        response_deserializer=conditional__trigger__pb2.StockTurnoverRateOutput.FromString,
        )
    self.StockMacd = channel.unary_unary(
        '/ConditionalTrigger/StockMacd',
        request_serializer=conditional__trigger__pb2.StockMacdInput.SerializeToString,
        response_deserializer=conditional__trigger__pb2.StockMacdOutput.FromString,
        )
    self.StockRsi = channel.unary_unary(
        '/ConditionalTrigger/StockRsi',
        request_serializer=conditional__trigger__pb2.StockRsiInput.SerializeToString,
        response_deserializer=conditional__trigger__pb2.StockRsiOutput.FromString,
        )
    self.StockKdj = channel.unary_unary(
        '/ConditionalTrigger/StockKdj',
        request_serializer=conditional__trigger__pb2.StockKdjInput.SerializeToString,
        response_deserializer=conditional__trigger__pb2.StockKdjOutput.FromString,
        )
    self.StockRoc = channel.unary_unary(
        '/ConditionalTrigger/StockRoc',
        request_serializer=conditional__trigger__pb2.StockRocInput.SerializeToString,
        response_deserializer=conditional__trigger__pb2.StockRocOutput.FromString,
        )
    self.StockSharpe = channel.unary_unary(
        '/ConditionalTrigger/StockSharpe',
        request_serializer=conditional__trigger__pb2.StockSharpeInput.SerializeToString,
        response_deserializer=conditional__trigger__pb2.StockSharpeOutput.FromString,
        )


class ConditionalTriggerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StockTurnoverRate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockMacd(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockRsi(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockKdj(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockRoc(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockSharpe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConditionalTriggerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StockTurnoverRate': grpc.unary_unary_rpc_method_handler(
          servicer.StockTurnoverRate,
          request_deserializer=conditional__trigger__pb2.StockTurnoverRateInput.FromString,
          response_serializer=conditional__trigger__pb2.StockTurnoverRateOutput.SerializeToString,
      ),
      'StockMacd': grpc.unary_unary_rpc_method_handler(
          servicer.StockMacd,
          request_deserializer=conditional__trigger__pb2.StockMacdInput.FromString,
          response_serializer=conditional__trigger__pb2.StockMacdOutput.SerializeToString,
      ),
      'StockRsi': grpc.unary_unary_rpc_method_handler(
          servicer.StockRsi,
          request_deserializer=conditional__trigger__pb2.StockRsiInput.FromString,
          response_serializer=conditional__trigger__pb2.StockRsiOutput.SerializeToString,
      ),
      'StockKdj': grpc.unary_unary_rpc_method_handler(
          servicer.StockKdj,
          request_deserializer=conditional__trigger__pb2.StockKdjInput.FromString,
          response_serializer=conditional__trigger__pb2.StockKdjOutput.SerializeToString,
      ),
      'StockRoc': grpc.unary_unary_rpc_method_handler(
          servicer.StockRoc,
          request_deserializer=conditional__trigger__pb2.StockRocInput.FromString,
          response_serializer=conditional__trigger__pb2.StockRocOutput.SerializeToString,
      ),
      'StockSharpe': grpc.unary_unary_rpc_method_handler(
          servicer.StockSharpe,
          request_deserializer=conditional__trigger__pb2.StockSharpeInput.FromString,
          response_serializer=conditional__trigger__pb2.StockSharpeOutput.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ConditionalTrigger', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import style_factor_pb2 as style__factor__pb2


class StyleFactorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetSize = channel.unary_unary(
        '/StyleFactor/GetSize',
        request_serializer=style__factor__pb2.GetSizeInput.SerializeToString,
        response_deserializer=style__factor__pb2.GetSizeOutput.FromString,
        )
    self.GetMomentum = channel.unary_unary(
        '/StyleFactor/GetMomentum',
        request_serializer=style__factor__pb2.GetMomentumInput.SerializeToString,
        response_deserializer=style__factor__pb2.GetMomentumOutput.FromString,
        )
    self.GetBookToMarket = channel.unary_unary(
        '/StyleFactor/GetBookToMarket',
        request_serializer=style__factor__pb2.GetBookToMarketInput.SerializeToString,
        response_deserializer=style__factor__pb2.GetBookToMarketOutput.FromString,
        )
    self.GetLiquidity = channel.unary_unary(
        '/StyleFactor/GetLiquidity',
        request_serializer=style__factor__pb2.GetLiquidityInput.SerializeToString,
        response_deserializer=style__factor__pb2.GetLiquidityOutput.FromString,
        )


class StyleFactorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetSize(self, request, context):
    """语法：
    get_size(ts_code: str, fields: str)
    描述:
    获取指定股票的市值因子
    前置条件：
    ts_code为股票代码加交易所代号，如000001.SZ表示平安银行；
    fields限定为'circ_mv'和'total_mv',分别代表流通市值和总市值
    后置条件：
    返回对应股票的流通市值/总市值的自然对数
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetMomentum(self, request, context):
    """语法：
    get_momentum(ts_code: str)
    描述:
    获取指定股票的动量因子
    前置条件：
    ts_code为股票代码加交易所代号，如000001.SZ表示平安银行；
    后置条件：
    返回对应股票的动量因子
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBookToMarket(self, request, context):
    """语法：
    get_book_to_market(stock_code: str)
    描述:
    获取指定股票的账面市值比因子
    前置条件：
    stock_code为股票代码，如300100表示双林股份；
    后置条件：
    返回对应股票的账面市值比因子
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLiquidity(self, request, context):
    """语法：
    get_liquidity(stock_code: str)
    描述:
    获取指定股票的流动性因子
    前置条件：
    stock_code为股票代码加交易所代号，如000001.SZ表示平安银行；
    后置条件：
    返回对应股票的流动性因子
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StyleFactorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetSize': grpc.unary_unary_rpc_method_handler(
          servicer.GetSize,
          request_deserializer=style__factor__pb2.GetSizeInput.FromString,
          response_serializer=style__factor__pb2.GetSizeOutput.SerializeToString,
      ),
      'GetMomentum': grpc.unary_unary_rpc_method_handler(
          servicer.GetMomentum,
          request_deserializer=style__factor__pb2.GetMomentumInput.FromString,
          response_serializer=style__factor__pb2.GetMomentumOutput.SerializeToString,
      ),
      'GetBookToMarket': grpc.unary_unary_rpc_method_handler(
          servicer.GetBookToMarket,
          request_deserializer=style__factor__pb2.GetBookToMarketInput.FromString,
          response_serializer=style__factor__pb2.GetBookToMarketOutput.SerializeToString,
      ),
      'GetLiquidity': grpc.unary_unary_rpc_method_handler(
          servicer.GetLiquidity,
          request_deserializer=style__factor__pb2.GetLiquidityInput.FromString,
          response_serializer=style__factor__pb2.GetLiquidityOutput.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'StyleFactor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))

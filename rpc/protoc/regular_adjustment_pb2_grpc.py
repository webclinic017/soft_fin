# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rpc.protoc.regular_adjustment_pb2 as regular__adjustment__pb2


class RegularAdjustmentStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StockLeastPosition = channel.unary_unary(
        '/RegularAdjustment/StockLeastPosition',
        request_serializer=regular__adjustment__pb2.StockLeastPositionInput.SerializeToString,
        response_deserializer=regular__adjustment__pb2.StockLeastPositionOutput.FromString,
        )
    self.StockVolatility = channel.unary_unary(
        '/RegularAdjustment/StockVolatility',
        request_serializer=regular__adjustment__pb2.StockVolatilityInput.SerializeToString,
        response_deserializer=regular__adjustment__pb2.StockVolatilityOutput.FromString,
        )
    self.StockChange = channel.unary_unary(
        '/RegularAdjustment/StockChange',
        request_serializer=regular__adjustment__pb2.StockChangeInput.SerializeToString,
        response_deserializer=regular__adjustment__pb2.StockChangeOutput.FromString,
        )
    self.StockMeanReturn = channel.unary_unary(
        '/RegularAdjustment/StockMeanReturn',
        request_serializer=regular__adjustment__pb2.StockMeanReturnInput.SerializeToString,
        response_deserializer=regular__adjustment__pb2.StockMeanReturnOutput.FromString,
        )


class RegularAdjustmentServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StockLeastPosition(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockVolatility(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockChange(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StockMeanReturn(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RegularAdjustmentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StockLeastPosition': grpc.unary_unary_rpc_method_handler(
          servicer.StockLeastPosition,
          request_deserializer=regular__adjustment__pb2.StockLeastPositionInput.FromString,
          response_serializer=regular__adjustment__pb2.StockLeastPositionOutput.SerializeToString,
      ),
      'StockVolatility': grpc.unary_unary_rpc_method_handler(
          servicer.StockVolatility,
          request_deserializer=regular__adjustment__pb2.StockVolatilityInput.FromString,
          response_serializer=regular__adjustment__pb2.StockVolatilityOutput.SerializeToString,
      ),
      'StockChange': grpc.unary_unary_rpc_method_handler(
          servicer.StockChange,
          request_deserializer=regular__adjustment__pb2.StockChangeInput.FromString,
          response_serializer=regular__adjustment__pb2.StockChangeOutput.SerializeToString,
      ),
      'StockMeanReturn': grpc.unary_unary_rpc_method_handler(
          servicer.StockMeanReturn,
          request_deserializer=regular__adjustment__pb2.StockMeanReturnInput.FromString,
          response_serializer=regular__adjustment__pb2.StockMeanReturnOutput.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'RegularAdjustment', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
